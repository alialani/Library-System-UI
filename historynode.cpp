#include "historynode.h"

		
//**************************************************************HistoryNode()***************************************************************************
// Constructor set *item to passed *newItem which is found in the items tree when found or in the Patron's history list and sets status to passed 
// itemStatus which imported as either true if passed from a checkout command excute method or false if passed from a return command excute method 
//******************************************************************************************************************************************************
HistoryNode::HistoryNode(Item* newItem, bool itemStatus) {
	item = newItem; 
	next = NULL; 
	status = itemStatus;
}


//****************************************************************~HistoryNode()************************************************************************
// Destructor calls deleteHistory() to deallocate all allocated memory 
//******************************************************************************************************************************************************
HistoryNode::~HistoryNode() {
	deleteHistory();
}	


//***************************************************************deleteHistory()************************************************************************
// Deletes the patron history list
//******************************************************************************************************************************************************
void HistoryNode::deleteHistory() {
	if ( next != NULL ) {
		item = NULL;

		// recursion call to delete next node
		next->deleteHistory();
		delete next;
		next = NULL;
	}
}


//********************************************************************getItem()*************************************************************************
// Returns Item* for the node
//******************************************************************************************************************************************************
Item* HistoryNode::getItem() {
	return item;
}


//********************************************************************getStatus()***********************************************************************
// Returns boolian status for the node
//******************************************************************************************************************************************************
bool HistoryNode::getStatus() {
	return status;
}


//**********************************************************************setNext()***********************************************************************
// set next to the passed HistoryNode*
//******************************************************************************************************************************************************
void HistoryNode::setNext(HistoryNode* newNode) {
	next = newNode;
}



//************************************************************************getNext()*********************************************************************
// Return HistoryNode* next
//******************************************************************************************************************************************************
HistoryNode* HistoryNode::getNext() {
	return next;
}


