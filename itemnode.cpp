#include "itemnode.h"

//******************************************************************ItemNode()**************************************************************************
// Default constructor set item* to the passed itemData* and set both left and right to NULL
//******************************************************************************************************************************************************
ItemNode::ItemNode(Item* itemData) {
	item = itemData;
	left = NULL;
	right = NULL;
}


//**********************************************************************~ItemNode()*********************************************************************
// Destructor deallocates all allocated memory using deleteChildren() to delete left and right children and deleteItem() to delete Item
//******************************************************************************************************************************************************
ItemNode::~ItemNode() {
	deleteChildren();
	deleteItem();
}


//************************************************************************getItem()*********************************************************************
// Returns Item*
//******************************************************************************************************************************************************
Item* ItemNode::getItem() {
	return item;
}


//*********************************************************************deleteItem()*********************************************************************
// Used in the destrucotr and it deletes item*
//******************************************************************************************************************************************************
void ItemNode::deleteItem() {
	if(item != NULL) {
		delete item;
		item = NULL;
	}
}


//******************************************************************setItem()***************************************************************************
// Stes item* to whatever passed
//******************************************************************************************************************************************************
void ItemNode::setItem(Item* newItem) { 
	item = newItem;
}


//*****************************************************************deleteChildren()**********************************************************************
// Delete bothe left and right children and their items recursively
//******************************************************************************************************************************************************
void ItemNode::deleteChildren() {
		if(right != NULL) {
			// go right recursively
			right->deleteChildren();
			right->deleteItem();
			delete right;
			right = NULL;
		}
		if(left != NULL) {
			// go left recursively
			left->deleteChildren();
			left->deleteItem();
			delete left;
			left = NULL;
		}
}



//*************************************************************************getLeft()********************************************************************
// Returns ItemNode* left 
//******************************************************************************************************************************************************
ItemNode* ItemNode::getLeft() {
	return left;
}



//*************************************************************************getRight()********************************************************************
// Returns ItemNode* right 
//******************************************************************************************************************************************************
ItemNode* ItemNode::getRight() { 
	return right;
}



//*************************************************************************setLeft()********************************************************************
// Sets left to whatever passed
//******************************************************************************************************************************************************
void ItemNode::setLeft(ItemNode *item) { 
	left = item;
}


//*************************************************************************setright()*******************************************************************
// Sets right to whatever passed
//******************************************************************************************************************************************************
void ItemNode::setRight(ItemNode *item) { 
	right = item;
}



