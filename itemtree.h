#pragma once

#include "itemnode.h"
#include <iostream>
using namespace std;

//-----------------------------------------------------------------------------
// ItemTree is a container for ItemNodes in the form of a BST data structure.
// The user can add/remove ItemNodes in the tree, check if an ItemNode exists
class ItemTree {
	private:
		char category;
		ItemNode *root;
	
	public:

//*******************************************************************ItemTree()*************************************************************************
//Defaul constructor set root to NULL
//******************************************************************************************************************************************************
		ItemTree();	


//********************************************************************~ItemTree()***********************************************************************
// Destructor deallocates allocated memory using makeEmpty()
//******************************************************************************************************************************************************
		~ItemTree();


//*********************************************************************makeEmpty()**********************************************************************
// Deallocates allocated memory deletes ItemNode* root and its children using deleteChildren() defined in ItemNode class
//******************************************************************************************************************************************************
		void makeEmpty();


//***********************************************************************add()**************************************************************************
// Adds the passed ItemNode* to teh tree and returns true for it
//******************************************************************************************************************************************************	
		bool add(ItemNode* item);


//****************************************************************display()*****************************************************************************
// Displays the ItemTree items using displayHelper()
//******************************************************************************************************************************************************
		void display() const;


//***************************************************************retrieve()*****************************************************************************
// Returns true when the passed (Item* searchForItem) is found and set the passed (Item** retrievedItem) to it to be used oustside the method
// Returns false when not found
//******************************************************************************************************************************************************
		bool retrieve(Item**, Item*) const;


//*************************************************************displayHelper()**************************************************************************
// Displays the ItemTree items recusively with an in-order sort
//******************************************************************************************************************************************************
		void displayHelper(ItemNode* root) const;
   
		
};



