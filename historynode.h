#pragma once

#include "item.h"


//-----------------------------------------------------------------------------
// HistoryNode is a data container to be used with the PatronHistory class. It
// contains the item rented by the patron, the return status of the item, and a
// pointer to the next HistoryNode.  The user may retrieve the item and get/set
// it's return status.
class HistoryNode {
	private:
		Item *item;
		bool status;
		HistoryNode *next;
		
	public:

//**************************************************************HistoryNode()***************************************************************************
// Constructor set *item to passed *newItem which is found in the items tree when found or in the Patron's history list and sets status to passed 
// itemStatus which imported as either true if passed from a checkout command excute method or false if passed from a return command excute method 
//******************************************************************************************************************************************************
		HistoryNode(Item* newItem, bool itemStatus);


//****************************************************************~HistoryNode()************************************************************************
// Destructor calls deleteHistory() to deallocate all allocated memory 
//******************************************************************************************************************************************************
		~HistoryNode();


//***************************************************************deleteHistory()************************************************************************
// Deletes the patron history list
//******************************************************************************************************************************************************
		void deleteHistory();
	

//********************************************************************getItem()*************************************************************************
// Returns Item* for the node
//******************************************************************************************************************************************************
		Item* getItem();


//********************************************************************getStatus()***********************************************************************
// Returns boolian status for the node
//******************************************************************************************************************************************************
		bool getStatus();

		
//**********************************************************************setNext()***********************************************************************
// set next to the passed HistoryNode*
//******************************************************************************************************************************************************	
 		void setNext(HistoryNode* newNode);
		
		
//************************************************************************getNext()*********************************************************************
// Return HistoryNode* next
//******************************************************************************************************************************************************	
		HistoryNode* getNext();
};

